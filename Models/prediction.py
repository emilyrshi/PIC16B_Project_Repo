# -*- coding: utf-8 -*-
"""prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RHWBmhaMbTjCO3ht2mn0dqq6QpLAcDc_
"""

import os
import numpy as np
from keras.preprocessing import image

def new_image(img_path, show=False):
  """
  Converts the new image used for prediction and setting it to the correct properties

  Arguments to function:
  - img_path: the path to where the image is stored
  - show: displaying the images passed through

  Return:
  - an array of the correct format to pass through our model
  """
    # Load image, resizing it to 28 by 28, and change it to grayscale
    img = image.load_img(img_path, target_size=(28, 28), color_mode='grayscale')
    # Coverting the image to numpy array
    img_tensor = image.img_to_array(img)
    # Adding an extra dimension to match the dimensions of the model
    img_tensor = np.expand_dims(img_tensor, axis=0)

    if show:
        # Displaying the image
        plt.imshow(img_tensor[0], cmap='gray')
        plt.axis('off')
        plt.show()

    return img_tensor

def predict_images(folder_dir, model, labels):
    """
    Makes a prediction based on the image that is being passed through

    Arguments to function:
    - folder_dir: the path to the location of the file
    - model: the model you are using for prediction
    - labels: used to output which letter the model predicted
    """

    # Looking through the files in the directory
    for filename in os.listdir(folder_dir):
      # Looking at files ending with JPEG
        if filename.endswith(".jpg"):
            # Loading images
            img_path = os.path.join(folder_dir, filename)
            new_image = load_image(img_path)
            # Making a prediction
            pred_prob = model.predict(new_image)
            # Getting the predicted class
            pred_class = np.argmax(pred_prob, axis=1)
            # Getting the predicted label
            predicted_letter = labels[pred_class[0]]
            # Print out the results
            print("Prediction for", filename, ":", predicted_letter)