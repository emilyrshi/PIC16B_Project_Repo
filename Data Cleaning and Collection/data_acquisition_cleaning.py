# -*- coding: utf-8 -*-
"""data_acquisition_cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rAz3y7IysDZU88u_ELoPConDFcfU2PZt
"""

from google.colab import drive
import os
import cv2
import numpy as np
import pandas as pd

# Self-created packages
import image_capture
from image_capture import collect_images
import image_to_pixel
from image_to_pixel import image_processing

# To capture your own personal images for your dataset, you can use the collect_images function

## PARAMETERS FOR FUNCTION
# Letters of gestures we will be taking pictures of (change to whatever you would like)
labels = ['h', 'e', 'l', 'o', 'w', 'r', 'd']

# Select the number of images you would like to take for each letter
num_img = 50 # default is set to 100

# Select the name of the folder you would like the images to be stored in
img_path = 'SignLanguageGestures' # default is set to 'CollectedImages'

## USE collect_images TO CAPTURE IMAGES USING PERSONAL WEBCAME
# A pop up screen will appear once you run this code
collect_images(labels, num_img, img_path)

# CHANGE THE CODE BELOW TO DIRECT TOWARD WHERE THE IMAGES YOU HAVE CAPTURED IS STORED
# In our example, our images have been stored in our google drive
drive.mount('/content/drive')
os.chdir('/content/drive/My Drive/PIC16B_PROJ/CollectedImages')

# Once images have been saves to your computer, you can convert your images into a dataframe of image features using the image_processing function

## PARAMETERS FOR FUNCTION
# Use the same labels you used for the collect_images function to ensure you are accessing the right folders
labels = ['h', 'e', 'l', 'o', 'w', 'r', 'd']

# Can use the same or different labels for the dataframe
# These letters below will be the ones appearing on the dataframe in a column 'Letters'
letters = ['H', 'E', 'L', 'O', 'W', 'R', 'D']

# Specify the path to the main folder where all the images are stored
main_folder = '/content/drive/My Drive/PIC16B_PROJ/CollectedImages'

## USE image_processing TO CONVERT IMAGES TO DATAFRAME
df = image_processing(main_folder, labels, letters)

## SAVING DATAFRAME TO CSV FILE
df.to_csv('sign_language_dataset.csv')