# -*- coding: utf-8 -*-
"""image_to_pixel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PcNeLZngM3Ymb9vNbRuoUdvI-0gWGIAG
"""

import cv2
import numpy as np
import pandas as pd
import os

def image_processing(main_folder, sub_folder, letters):
    """
    Cleaning the images and creating a dataframe of image features

    Arguments to function:
    - main_folder: path to the main directory where all images are save from the image capture
    - sub_folder: list of sub folder titles within the main folder
    - letters: list of letters corresponding to each sub folder title

    Returns:
    - df: dataframe containing flattened arrays of processed images
    """
    # Initialize an empty DataFrame
    df = pd.DataFrame()

    # Loop through each folder title
    for sub_title in sub_folder:
        # Combining the main folder and sub folder together
        folder_dir = os.path.join(main_folder, sub_title)
        # If this folder directory exists we continue to for loop
        if os.path.isdir(folder_dir):
            # Loop through the images in the directory
            for filename in os.listdir(folder_dir):
                # Check if the file ends with .jpg
                if filename.endswith(".jpg"):
                  # Read the image
                  image_path = os.path.join(folder_dir, filename)
                  letter_img = cv2.imread(image_path)

                  # Converting the image into grayscale
                  letter_gray = cv2.cvtColor(letter_img, cv2.COLOR_BGR2GRAY)

                  # Resize the image
                  letter_gray = cv2.resize(letter_gray, (28, 28), interpolation=cv2.INTER_LINEAR)

                  # Convert the image to a NumPy array
                  np_array = np.array(letter_gray)

                  # Flatten the array
                  flattened_array = np_array.flatten()

                  # Append the flattened array to the DataFrame
                  df = df.append(pd.Series(flattened_array), ignore_index=True)

            # # Add a column with the specified letter for all rows
            df.loc[df.index[df.shape[0] - len(os.listdir(folder_dir)):], 'Letters'] = letters[sub_title.index(sub_title)]

    return df