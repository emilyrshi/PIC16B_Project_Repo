# -*- coding: utf-8 -*-
"""image_capture.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PbNR2kTVEsLMyGrbxyL30Bm0_BU6mga8
"""

import cv2
import os
import time
import uuid

def collect_images(labels, num_img=100, img_path='CollectedImages'):
    """
    Taking pictures using your own personal webcame
    A pop up will open on your screen and camera will turn on

    Arguments to function
    - labels: the american sign language gestures you would like to capture
    - num_img: the number of imagers per gestures
    - img_path: the name of the folder to store your iamges

    Return:
    - a new folder with all the captured images will be saved to your computer
    - If you have named your img_path 'CollectedImages', you will see a folder called CollectedImages.
        Inside, you will see sub folders named with the labels you have used.
        Within the sub folders will be all the images you have captured.

    ***
    We would like to thank Nick Renotte for his youtube tutorial on how to collect images using our personal webcams.
    His youtube video and well as his github, which we have pasted below:
    https://www.youtube.com/watch?v=pDXdlXlaCco
    https://github.com/nicknochnack/RealTimeObjectDetection.git
    ***
    """
    # Loop through each of the labels in the labels array
    for label in labels:
        # Create a directory for each label
        label_directory = os.path.join(IMAGES_PATH, label)
        os.makedirs(label_directory, exist_ok=True)

        # Beginning video capture (should see a popup on the computer screen)
        cap = cv2.VideoCapture(0)
        print('Collecting images for {}'.format(label))

        # Allows for 5 seconds to change positions when capturing images
        time.sleep(5)

        # Looking at whether the webcam capture works
        if not cap.isOpened():
            print("Error: Could not open webcam")
            break

        # Taking the amount of images we set above, which is 100 images per letter
        for imgnum in range(number_imgs):
            # Setting up the frame for our images
            ret, frame = cap.read()

            if ret:
                # Creating the name of our image file
                imgname = os.path.join(label_directory, label + '_' + str(uuid.uuid1()) + '.jpg')

                # Adding the images into our directory
                cv2.imwrite(imgname, frame)

                # Displaying the image on our screen to see what we have taken
                cv2.imshow('frame', frame)

                # Pauses to get into another pose
                time.sleep(2)

            # Looking at whether the user wants to quit taking images
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        # Finishes the capture of image for a letter
        cap.release()

    # Closes the camera popup window
    cv2.destroyAllWindows()